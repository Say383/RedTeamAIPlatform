import argparse
import logging
from scapy.all import sr1, IP, ICMP
from utilities.nmap_parser import parse_nmap_results
from ai_models.anomaly_detector import AnomalyDetector
from utilities.result_saver import ResultSaver
from utilities.nmap_parser import parse_nmap_output

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class NetworkScanner:
    def __init__(self, target, ports, timeout):
        self.target = target
        self.ports = ports
        self.timeout = timeout
        self.anomaly_detector = AnomalyDetector()
        self.result_saver = ResultSaver()

    def ping_sweep(self):
        """
        Perform a ping sweep to check if the target is up.
        """
        logging.info(f"Starting ping sweep on {self.target}")
        try:
            response = sr1(IP(dst=self.target)/ICMP(), timeout=self.timeout)
            if response:
                logging.info(f"Host {self.target} is up.")
                return True
            else:
                logging.warning(f"No response from {self.target}. Host may be down.")
                return False
        except Exception as e:
            logging.error(f"An error occurred during ping sweep: {e}")
            return False

    def port_scan(self):
        """
        Perform a port scan on the target using the specified ports.
        """
        logging.info(f"Starting port scan on {self.target} for ports {self.ports}")
        nm = nmap.PortScanner()
        nm.scan(self.target, self.ports)
        scan_results = nm.csv()
        parsed_results = parse_nmap_results(scan_results)
        anomalies = self.anomaly_detector.detect(parsed_results)
        if anomalies:
            logging.warning(f"Anomalies detected: {anomalies}")
        self.result_saver.save_results(parsed_results)
        return parsed_results

    def scan(self):
        """
        Run the full scan, including ping sweep and port scan.
        """
        if self.ping_sweep():
            return self.port_scan()
        else:
            return {}

def main():
    parser = argparse.ArgumentParser(description='Network Scanner Tool')
    parser.add_argument('--target', type=str, required=True, help='Target IP address or range')
    parser.add_argument('--ports', type=str, help='Comma-separated list of ports to scan')
    parser.add_argument('--timeout', type=int, default=2, help='Timeout for each request in seconds')
    args = parser.parse_args()

    scanner = NetworkScanner(target=args.target, ports=args.ports, timeout=args.timeout)
    scan_results = scanner.scan()
    if scan_results:
        logging.info(f"Scan results: {scan_results}")
    else:
        logging.info("No open ports found or host is down.")

if __name__ == "__main__":
    main()
