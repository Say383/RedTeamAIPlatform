import requests
import logging
from typing import Dict, Any
from packaging import version

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class VulnerabilityAssessment:
    def __init__(self, vulnerability_db_url: str):
        self.vulnerability_db_url = vulnerability_db_url

    def fetch_vulnerability_details(self, vulnerability_id: str) -> Dict[str, Any]:
        """Fetches details of a specific vulnerability from the database."""
        try:
            response = requests.get(f"{self.vulnerability_db_url}/{vulnerability_id}")
            response.raise_for_status()
            return response.json()
        except requests.exceptions.HTTPError as http_err:
            logging.error(f'HTTP error occurred: {http_err}')
            raise
        except Exception as err:
            logging.error(f'An error occurred: {err}')
            raise

    def assess_vulnerability(self, target_info: Dict[str, Any]) -> Dict[str, Any]:
        """Assesses the vulnerability based on target information."""
        try:
            vulnerability_details = self.fetch_vulnerability_details(target_info['vulnerability_id'])
            software_vulnerabilities = vulnerability_details.get('software_vulnerabilities', [])
            target_software_version = target_info.get('software_version')

            if not target_software_version:
                raise ValueError("Target software version is not provided")

            for vulnerability in software_vulnerabilities:
                if version.parse(target_software_version) <= version.parse(vulnerability['fixed_in_version']):
                    vulnerability_details['is_exploitable'] = True
                    break
            else:
                vulnerability_details['is_exploitable'] = False

            vulnerability_details['risk_level'] = self.calculate_risk(vulnerability_details, target_info)
            return vulnerability_details
        except KeyError as e:
            logging.error(f'Missing key in target information: {e}')
            raise
        except ValueError as e:
            logging.error(f'Value error: {e}')
            raise
        except Exception as err:
            logging.error(f'An error occurred during vulnerability assessment: {err}')
            raise

    def calculate_risk(self, vulnerability_details: Dict[str, Any], target_info: Dict[str, Any]) -> str:
        """Calculates the risk level of a vulnerability."""
        # Risk factors could include the severity of the vulnerability, whether it's remotely exploitable,
        # the complexity of the exploit, whether there's a known exploit in the wild, etc.
        risk_factors = {
            'severity': vulnerability_details.get('severity', 'low'),
            'exploit_complexity': vulnerability_details.get('exploit_complexity', 'high'),
            'remotely_exploitable': vulnerability_details.get('remotely_exploitable', False),
            'exploit_in_the_wild': vulnerability_details.get('exploit_in_the_wild', False)
        }

        # A simple risk calculation example
        risk_score = 0
        risk_score += {
            'low': 1,
            'medium': 5,
            'high': 10
        }.get(risk_factors['severity'], 0)

        risk_score += 0 if risk_factors['exploit_complexity'] == 'high' else 5
        risk_score += 10 if risk_factors['remotely_exploitable'] else 0
        risk_score += 20 if risk_factors['exploit_in_the_wild'] else 0

        # Define risk levels based on the risk score
        if risk_score > 30:
            return 'critical'
        elif risk_score > 20:
            return 'high'
        elif risk_score > 10:
            return 'medium'
        else:
            return 'low'

# Example usage
if __name__ == "__main__":
    va = VulnerabilityAssessment("https://example-vulnerability-db.com/api")
    target = {
        "ip": "192.168.1.1",
        "vulnerability_id": "CVE-2023-0001",
        "service": "http",
        "port": 80,
        "software_version": "1.0.0"
    }
    try:
        assessment_result = va.assess_vulnerability(target)
        logging.info(f'Assessment result: {assessment_result}')
    except Exception as e:
        logging.error(f'Failed to assess vulnerability: {e}')
