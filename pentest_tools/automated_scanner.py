import nmap
import logging
import requests
from cvss import CVSS3
from datetime import datetime
from urllib.parse import urlparse
from metasploit.msfrpc import MsfRpcClient

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class NetworkVulnerabilityScanner:
    def __init__(self, vulnerability_feed_url, msf_rpc_password, report_dir):
        self.vulnerability_feed_url = vulnerability_feed_url
        self.scanner = nmap.PortScanner()
        self.msf_client = MsfRpcClient(msf_rpc_password)
        self.report_dir = report_dir

    def fetch_vulnerability_data(self, service_name):
        """
        Fetches vulnerability data from an external feed.
        """
        try:
            response = requests.get(f"{self.vulnerability_feed_url}/{service_name}")
            response.raise_for_status()
            return response.json()
        except requests.HTTPError as http_err:
            logging.error(f'HTTP error occurred: {http_err}')
        except Exception as err:
            logging.error(f'Other error occurred: {err}')
        return None

    def scan_target(self, target_ip):
        """
        Scans the target IP for open ports and services.
        """
        try:
            logging.info(f"Scanning target {target_ip} for open ports and services.")
            scan_result = self.scanner.scan(target_ip, arguments='-sV')
            return scan_result
        except nmap.PortScannerError as e:
            logging.error(f"nmap scanner error: {e}")
            raise
        except Exception as e:
            logging.error(f"An unexpected error occurred: {e}")
            raise

    def analyze_scan_results(self, scan_results):
        """
        Analyzes scan results and assesses vulnerabilities on the target.
        """
        vulnerabilities = []
        try:
            for host in scan_results['scan']:
                for proto in scan_results['scan'][host].get('tcp', {}):
                    service_info = scan_results['scan'][host]['tcp'][proto]
                    vulnerability_data = self.fetch_vulnerability_data(service_info['name'])
                    if vulnerability_data:
                        vulnerabilities.append({
                            'host': host,
                            'port': proto,
                            'service': service_info['name'],
                            'vulnerabilities': vulnerability_data
                        })
            return vulnerabilities
        except KeyError as e:
            logging.error(f"Missing key in scan results: {e}")
            raise
        except Exception as e:
            logging.error(f"An unexpected error occurred during scan result analysis: {e}")
            raise

    def generate_report(self, vulnerabilities):
        """
        Generates a report from the vulnerabilities found.
        """
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        report_file = f"{self.report_dir}/scan_report_{timestamp}.txt"
        with open(report_file, 'w') as file:
            for vulnerability in vulnerabilities:
                file.write(f"Host: {vulnerability['host']}\n")
                file.write(f"Port: {vulnerability['port']}\n")
                file.write(f"Service: {vulnerability['service']}\n")
                file.write("Vulnerabilities:\n")
                for vuln in vulnerability['vulnerabilities']:
                    file.write(f"  - {vuln['id']}: {vuln['description']}\n")
                    file.write(f"    Severity: {vuln['severity']}\n")
                    file.write(f"    CVSS Score: {vuln['cvss_score']}\n")
                file.write("\n")
        logging.info(f"Report generated: {report_file}")

# Example usage
if __name__ == "__main__":
    vulnerability_feed_url = "https://vulnerability-feed-url.com/api"
    msf_rpc_password = "msfpassword"
    report_dir = "/path/to/report/directory"

    scanner = NetworkVulnerabilityScanner(vulnerability_feed_url, msf_rpc_password, report_dir)
    target = "192.168.1.1"
    try:
        scan_results = scanner.scan_target(target)
        vulnerabilities = scanner.analyze_scan_results(scan_results)
        scanner.generate_report(vulnerabilities)
    except Exception as e:
        logging.error(f"Failed to complete scanning process: {e}")
